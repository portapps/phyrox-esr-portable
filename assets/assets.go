// Code generated by go-bindata. DO NOT EDIT.
// sources:
// res/FirefoxESR.lnk (1.224kB)

package assets

import (
	"bytes"
	"compress/gzip"
	"crypto/sha256"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %w", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes  []byte
	info   os.FileInfo
	digest [sha256.Size]byte
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _firefoxesrLnk = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xac\x93\x5f\x48\x7b\x65\x18\xc7\x3f\x4b\x7f\xbf\x5f\xe6\xcd\x86\x12\x29\x86\xe7\x42\x44\xab\xcd\x73\xe6\x36\xb7\x59\x31\x3b\x6e\x4d\xdd\xf4\xa4\x19\x22\xe7\xa2\x99\x67\x7f\x68\x63\xb6\x15\x4c\x09\xa9\x2b\x49\x2a\xfa\x07\x29\x11\x8e\x08\x34\x28\xa1\x3f\x04\xa1\x95\x10\xdd\x78\x51\x5e\x28\x44\x81\x69\xd1\x45\x41\x08\x76\x55\x09\xc6\x79\xcf\x31\x9c\xd1\x9f\x8b\x9e\x8b\xe7\x39\xe7\x3c\xef\xfb\x7c\xbf\xef\xf7\xfd\x9e\x04\xe0\x68\xbe\x09\x33\x76\x44\x26\xf6\x1a\x20\x01\x3d\xfd\xab\xda\xbd\x07\xfb\x0e\x79\xc6\xaa\x1f\x0e\x45\xbe\x6f\xda\xdd\x77\xec\xd5\x5d\x17\x0b\x1d\xd4\xc6\x8b\x8e\x66\xda\xb5\xa3\xb1\x3d\xe9\xa7\x70\xce\xf9\xc6\x57\x37\x73\xa7\x2c\xbf\xde\x42\x8f\x1a\xd6\xf9\x6b\xac\xa0\x88\x9a\x19\x7d\x60\xdb\x85\x36\x3e\x76\xff\xf8\xc0\xa2\x17\x9e\xa2\x81\x7a\x4e\x3e\xe9\x49\x86\xef\x36\x7b\x1e\xa0\xfd\x7a\x2d\xe0\x43\x22\x7f\xba\xfe\x31\x1a\x25\x8a\x64\x28\x91\xa2\x80\x44\x8c\x1c\x79\x0c\xca\x48\x74\x51\x21\x48\x80\x6e\x20\x42\x99\x2c\x06\x79\xf2\xf4\xe2\xc5\xc3\xac\x78\xbe\x0b\x37\x5e\x14\x82\x28\xf4\x01\xb7\x91\xbd\xc4\xcb\x49\x72\x6c\x7a\x28\x91\x58\x54\x40\xb3\x79\x65\x46\xb5\xed\x0b\x5e\x37\xde\x37\x39\xb9\xaf\x9c\x6c\x3e\xda\xe8\x48\x52\x64\x41\x70\xc9\x93\xb2\x79\x95\x30\x48\x53\xa4\x22\x70\x66\xf0\x62\x4a\x39\x39\xda\xf1\x8a\x44\x3a\x57\x32\xd2\xc5\x8a\xc7\xa8\x18\xc4\x6b\x90\x34\x81\xf4\xd9\x07\x26\x92\xeb\x0a\xd2\x70\xe4\x4b\xd2\x35\x93\x3d\x18\x54\x30\x80\x56\x20\x07\xb4\xd9\xca\x99\xd5\x6f\xef\xcb\x02\x2d\x40\x1d\xa0\x6e\xb5\xe9\x4e\x60\x30\xd7\xf1\xd8\x13\x86\xa4\xa2\x86\x75\xad\x54\xcc\x94\x52\x05\x29\x96\xcb\x1b\x65\xa9\xab\x12\x0c\x74\xeb\xc9\xe2\x42\x2e\x9f\x4f\x49\x31\x8b\xa9\x7e\x99\x31\x41\x3c\x78\xd0\x6b\xf2\x7f\xbb\x1a\x9d\x7f\x96\x4a\xff\x9b\x03\x76\xa2\x12\xfe\xdf\x50\x4c\x01\xae\x41\xf5\x0e\xe0\x73\x5b\xac\x46\xa8\x9e\x44\xa6\x9f\xfc\xbd\x7a\x36\xb2\x34\xbc\x73\x7a\xf4\xd1\x6f\xcf\x9b\xbd\x87\x2d\xe1\xaa\x53\xb6\x98\x73\x8f\xb8\xb3\xa9\x59\xa3\x7c\x71\x29\xb3\x9b\x9b\x8f\xcf\x9f\xbe\x1d\x7d\xe9\xe9\x1f\xde\xfa\x7a\x63\xa9\xde\xf9\x42\xff\x61\xdb\xc0\x8f\xae\xd5\x47\x1f\x7c\xaf\xee\x96\xe5\xc4\xbf\xf5\x65\x07\x34\x40\xf5\x19\x40\x99\xd0\x26\xbe\x5b\x9e\x8a\x6d\x27\x82\xea\xd6\x59\xd3\xcb\x9d\x2b\x85\x2f\x0a\x40\xbd\x09\xd4\x0e\x98\xde\x98\xc0\x8d\x82\x1b\xbf\xed\x65\x37\xbd\xf4\x11\xc2\x87\x8f\x10\x21\x02\x42\x04\xb3\x17\xc2\x8f\x8c\x4f\xbc\x7b\x09\x8a\x95\x7e\x7c\xc8\xc8\xc2\xff\xe6\x8e\x80\x98\x66\x7d\xb1\x62\xc6\x26\x32\xd9\x95\x58\x9b\x5f\x0b\x8d\x6c\xec\x1d\xef\xbb\x8f\x0f\x7e\x71\x59\x22\x59\xe9\xfc\xdc\xb2\xd7\xb5\x0b\x66\x66\x37\x4a\x1f\x2a\x31\x31\x3b\x40\x14\x45\x4c\x56\x05\x4b\x85\xfb\xfe\xf4\x71\xc8\x46\x78\xf7\xd6\xc2\xe0\x3b\xcf\xcd\xc5\xd7\xe3\x11\xcf\x9b\xf7\x54\x9e\xbd\xdd\xf6\x2a\x71\xe0\xdb\xc3\xd6\x9f\x97\x7e\x3d\x89\xbf\xba\xf9\xcd\xc8\x8d\xdd\x45\xf9\xf2\x8f\xf0\x47\x00\x00\x00\xff\xff\xa7\x40\x16\xa8\xc8\x04\x00\x00")

func firefoxesrLnkBytes() ([]byte, error) {
	return bindataRead(
		_firefoxesrLnk,
		"FirefoxESR.lnk",
	)
}

func firefoxesrLnk() (*asset, error) {
	bytes, err := firefoxesrLnkBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "FirefoxESR.lnk", size: 1224, mode: os.FileMode(0666), modTime: time.Unix(1552001672, 0)}
	a := &asset{bytes: bytes, info: info, digest: [32]uint8{0x53, 0x39, 0xe3, 0xd6, 0xe9, 0x82, 0x1c, 0x75, 0xef, 0x7c, 0x85, 0x47, 0xdd, 0x3d, 0x6b, 0x49, 0x96, 0xa3, 0x92, 0x32, 0x49, 0xbb, 0x31, 0xf1, 0x5, 0x86, 0xf0, 0x2e, 0x94, 0x91, 0xdb, 0x99}}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// AssetString returns the asset contents as a string (instead of a []byte).
func AssetString(name string) (string, error) {
	data, err := Asset(name)
	return string(data), err
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// MustAssetString is like AssetString but panics when Asset would return an
// error. It simplifies safe initialization of global variables.
func MustAssetString(name string) string {
	return string(MustAsset(name))
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetDigest returns the digest of the file with the given name. It returns an
// error if the asset could not be found or the digest could not be loaded.
func AssetDigest(name string) ([sha256.Size]byte, error) {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[canonicalName]; ok {
		a, err := f()
		if err != nil {
			return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s can't read by error: %v", name, err)
		}
		return a.digest, nil
	}
	return [sha256.Size]byte{}, fmt.Errorf("AssetDigest %s not found", name)
}

// Digests returns a map of all known files and their checksums.
func Digests() (map[string][sha256.Size]byte, error) {
	mp := make(map[string][sha256.Size]byte, len(_bindata))
	for name := range _bindata {
		a, err := _bindata[name]()
		if err != nil {
			return nil, err
		}
		mp[name] = a.digest
	}
	return mp, nil
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"FirefoxESR.lnk": firefoxesrLnk,
}

// AssetDebug is true if the assets were built with the debug flag enabled.
const AssetDebug = false

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"},
// AssetDir("data/img") would return []string{"a.png", "b.png"},
// AssetDir("foo.txt") and AssetDir("notexist") would return an error, and
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		canonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(canonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"FirefoxESR.lnk": {firefoxesrLnk, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory.
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively.
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	canonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(canonicalName, "/")...)...)
}
